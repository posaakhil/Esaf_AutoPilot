name: Build and Release ESAF Automation

on:
  push:
    branches: [ Dev ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        type: choice
        options:
          - draft
          - public
        default: draft
        required: true

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write  # Required to push VERSION update and create releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Auto-increment version and update VERSION file
        id: bump_version
        run: |
          # Read current version
          $current = Get-Content VERSION -Raw | ForEach-Object { $_.Trim() }
          Write-Host "Current version: $current"

          # Parse and increment PATCH version (x.y.z -> x.y.(z+1))
          if ($current -match '^(\d+)\.(\d+)\.(\d+)$') {
            $major = $matches[1]
            $minor = $matches[2]
            $patch = [int]$matches[3] + 1
            $newVersion = "$major.$minor.$patch"
          } else {
            Write-Error "Invalid VERSION format. Expected x.y.z"
            exit 1
          }

          # Write new version
          Set-Content -Path VERSION -Value $newVersion
          echo "NEW_VERSION=$newVersion" >> $env:GITHUB_OUTPUT
          Write-Host "Bumped version to: $newVersion"

          # Commit and push the VERSION update
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add VERSION
          git commit -m "chore: bump version to v$newVersion [skip ci]"
          git push

      - name: Install dependencies
        run: |
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Verify required files exist
        run: |
          $required = @(
            "autopilot.py",
            "esaf_automation.py",
            "merge_and_cleanup.py",
            "Data_Analysis_Split.py",
            "summary_pivot.py",
            "Interactive_Dashboard.py",
            "complete_process.py",
            "esaf_config_defaults.json"
          )
          foreach ($file in $required) {
            if (-not (Test-Path $file)) {
              Write-Error "Missing required file: $file"
              exit 1
            }
          }
          Write-Host "✅ All required files present"

      - name: Build executable with PyInstaller
        run: |
           pyinstaller --onefile --icon="favicon-esaf.ico" --add-data "esaf_config_defaults.json;." --add-data "esaf_automation.py;." --add-data "merge_and_cleanup.py;." --add-data "Data_Analysis_Split.py;." --add-data "summary_pivot.py;." --add-data "Interactive_Dashboard.py;." --add-data "complete_process.py;." --hidden-import "pandas" --hidden-import "openpyxl" --hidden-import "plotly" --hidden-import "colorama" --hidden-import "keyboard" --hidden-import "pyautogui" --hidden-import "jinja2" --hidden-import "plotly.graph_objects" --hidden-import "plotly.express" --hidden-import "PIL" autopilot.py
           
      - name: Verify .exe was built
        run: |
          if (Test-Path "dist\\autopilot.exe") {
            Write-Host "✅ .exe built successfully"
          } else {
            Write-Error "❌ .exe not found in dist folder"
            exit 1
          }

      - name: Bundle all scripts and config
        run: |
          $version = "${{ steps.bump_version.outputs.NEW_VERSION }}"
          Copy-Item "*.py" "dist/"
          Copy-Item "esaf_config_defaults.json" "dist/"
          Move-Item "dist\\autopilot.exe" "dist\\esaf-automation-v$version.exe"
          if (Test-Path "dist\\esaf-automation-v$version.exe") {
            Write-Host "✅ Final .exe ready: esaf-automation-v$version.exe"
          } else {
            Write-Error "❌ Final .exe not found after rename"
            exit 1
          }

      - name: Upload artifact (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: esaf-automation-exe
          path: dist/esaf-automation-v${{ steps.bump_version.outputs.NEW_VERSION }}.exe

      - name: Create Release (Draft or Public)
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.NEW_VERSION }}
          name: Release v${{ steps.bump_version.outputs.NEW_VERSION }}
          body: |
            ESAF Automation Suite v${{ steps.bump_version.outputs.NEW_VERSION }}
            
            **First run instructions**:
            1. Run the `.exe`
            2. Go to **Option 1 → Option 7** to generate `esaf_config.json`
            3. Then use any option
          draft: ${{ github.event_name == 'push' || (github.event.inputs.release_type == 'draft') }}
          files: |
            dist/esaf-automation-v${{ steps.bump_version.outputs.NEW_VERSION }}.exe
